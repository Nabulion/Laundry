//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace UserLaundry
{
    using System;
    using System.Collections.Generic;
    
    public partial class Reservation
    {
        public Reservation()
        {
            this.StartedWashCosts = new HashSet<StartedWashCost>();
            this.Machines = new HashSet<Machine>();
        }
    
        public int id { get; set; }
        public string LaundryUser { get; set; }
        public Nullable<System.DateTime> reservationDate { get; set; }
        public Nullable<int> WashTime { get; set; }
        public Nullable<bool> reservationUsed { get; set; }
        public Nullable<bool> inactive { get; set; }
    
        public virtual LaundryUser LaundryUser1 { get; set; }
        public virtual WashTime WashTime1 { get; set; }
        public virtual ICollection<StartedWashCost> StartedWashCosts { get; set; }
        public virtual ICollection<Machine> Machines { get; set; }

        public List<Machine> GetNonStartedMachines()
        {
            List<Machine> list = new List<Machine>();

            foreach (var machine in Machines)
            {
                if (!machine.start.GetValueOrDefault())
                {
                    list.Add(machine);
                }
            }
            return list;
        }

        public StartedWashCost findStartedWash(MachineProgram p)
        {
            StartedWashCost startedWashCost = null;
            foreach (var started in StartedWashCosts)
            {
                if (started.MachineProgram1.Equals(p))
                {
                    startedWashCost = started;
                }
            }
            return startedWashCost;
        }

        public bool checkDate(int minBeforeToLate)
        {
            DateTime resDateTime = reservationDate.GetValueOrDefault();

            return (reservationDate == (DateTime.Today) || resDateTime.AddMinutes(minBeforeToLate) + WashTime1.fromTime <= DateTime.Now);
        }

        public bool checkMachine(Machine m)
        {
            bool machineFound = false;
            foreach (var start in StartedWashCosts)
            {
                if (start.MachineProgram1.Machine == m.id)
                {
                    machineFound = true;
                }
            }
            return machineFound;
        }

        public override string ToString()
        {
            return "Number: " + id + " Date: " + (reservationDate) + WashTime1;
        }
    }
    }
}
